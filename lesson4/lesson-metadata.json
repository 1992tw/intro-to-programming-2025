{
  "id": "687970c3a4ac7ef2a17a639c",
  "lessonNumber": 4,
  "title": "Callbacks",
  "status": "pending",
  "assignment": {
    "title": "Assignment for Lesson 4",
    "objective": "No objective specified",
    "expectedCapabilities": [],
    "instructions": [],
    "tasks": [
      {
        "taskNumber": 1,
        "title": "Task 1",
        "description": "**NOTE: If the CodeSandbox file gets updated, the code example below may not be up to date.  You can confirm the most recent version of this assignment by clicking this:**\n[Link to CodeSandbox Assignment](https://codesandbox.io/p/sandbox/lesson-4-javascript-array-methods-2025-w4mycz?file=%2Fsrc%2Findex.mjs)\n\n``` javascript\n//--------------- IMPORTANT!!! ---------------\n\n// Use the keyboard shortcut Alt + Z (for PC) or Option + Z (for Mac) to allow word wrap on this document.  Word wrap breaks the lines so you don't have to keep scrolling left and right to read.\n\n//READ THE INFORMATION IN THE BROWSER WINDOW PANEL ON THE RIGHT BEFORE BEGINNING YOUR ASSIGNMENT!!\n\n//---------- OVERVIEW AND INSTRUCTIONS ----------\n\n//----------------------------------\n// LESSON 4 ARRAY METHODS\n//----------------------------------\n\n//  This is the coding assigment for the fourth week of the Intro to Programming course from Code the Dream. The concepts touched on in this assignment include:\n\n//  - Using Array Methods\n//  - Understanding about iterative methods\n//  - Learning about callbacks\n//  - Creating Higher Order Functions\n//  - Using existing Array Higher Order Functions (e.g. forEach(), map(), filter(), etc.)\n\n// In this assignment you will write your own code. Your instructions are listed as \"comments\", meaning the instructions are grayed out and start with '//' at the beginning of the line of code. Put your answers immediately below the instructions for each question. As mentioned in the Welcome to week 4 information to the right, you'll need to use console logs for all the questions to check your code output. Using a function in a console.log is very similar to how you were using them with variables last week. To invoke/call the function use the syntax:\n\n//  console.log(\"Q#: \", functionName(anyInput))\n\n// Please be sure to check the output of your called functions and console logs in the Console tab to the bottom right of this screen. If your Console is not showing, click the Inspect Button in the top right (see the Welcome to week 4 information to the right if you need help finding that)  Check to make sure that the output you get in your Console is the expected output.\n\n// ----- Practice JS array methods: forEach -----\n//---------- QUESTION 1 ----------\n// Create an variable called 'names' and assign it an array of people's names.  Write a function called 'printNames' that uses the forEach array method to log each name in an array to the console.  Remember, since you're using the console.log in the function, you'll just want to call your function and pass it the array of names when testing your code.\n\n// EXAMPLE CALL:\n//    let names = [\"Juan Marcos\", \"Aleksandra Ivanov\", \"Zhang Wei\", \"Bernice King\"];\n//    console.log(\"Q1 printNames:\");\n//    printNames(names);\n\n// EXAMPLE OUTPUT:\n//   Q1 printNames:\n//   Juan Marcos\n//   Aleksandra Ivanov\n//   Zhang Wei\n//   Bernice King\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 2 ----------\n// Create a variable called 'trees' and assign it an array of 3 objects.  Each object should have a 'type' property and a 'height' property.  You can use 'type' to describe the type of tree (ex. Dogwood, Maple, Oak, Elm, etc.) and give them any height.  Now write a function called 'logTreeType' that uses forEach to log the type of each tree object to the console.\n\n// EXAMPLE CALL:\n//   const trees = [\n//     { type: \"oak\", height: \"30m\" },\n//     { type: \"elm\", height: \"25m\" },\n//     { type: \"birch\", height: \"18m\" } ]\n//   console.log(\"Q2 logTreeType:\");\n//   logTreeType(trees);\n\n// EXAMPLE OUTPUT:\n//   Q2 logTreeType:\n//   oak\n//   elm\n//   birch\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 3 ----------\n// Create a variable called 'myNumbers' and assign it an array of numbers.  Now write a function caled 'totalPoints' that uses forEach to add up all the numbers in that array of numbers.\n\n// EXAMPLE CALL:\n//   let myNumbers = [1, 2, 7, 5, 8];\n//   console.log (`Q3 totalPoints [${myNumbers}]:`, totalPoints(myNumbers));\n\n// EXAMPLE OUTPUT:\n//   Q3 totalPoints [1,2,7,5,8]:  23\n\n// Try a few different input arrays to verify your code is working.\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 4 ----------\n// Create a variable called 'myWords' and assign it an array of words.  Then write a function called 'buildSentence' that takes in an array of words and uses forEach to add the strings together. It should also add a space, \" \", after each word.\n\n// EXAMPLE CALL:\n//    myWords = [\"You\",\"can\",\"if\",\"you\",\"think\",\"you\",\"can\",\"!\"];\n//    console.log (`Q4 buildSentence [${myWords}]: `, buildSentence(myWords));\n\n// EXAMPLE OUTPUT:\n//   Q4 buildSentence [You,can,if,you,think,you,can,!]:  You can if you think you can !\n\n// Note: You should have a space after the ! too\n// Try a few different input arrays to verify your code is working.\n\n// PUT YOUR CODE HERE\n\n//---------- QUESTION 5 ----------\n// Create a variable called 'decimals' and assign it an array of decimal numbers.  Write a function called 'logPercentages' that takes an array of decimal numbers and uses forEach to log each one with the numbers formatted as percentages. That means:\n//    Multiply by 100\n//    Include the percent symbol (%) at the end of the string\n\n// EXAMPLE CALL:\n//   let decimals = [0.75, 0.91, 0.2, 1.34];\n//   console.log(\"Q5 logPercentages:\");\n//   logPercentages(decimals);\n\n// EXAMPLE OUTPUT:\n// Q5 logPercentages:\n//   75%\n//   91%\n//   20%\n//   134%\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS Array Methods - map -----\n// ---------- QUESTION 6 ----------\n// Let's practice using the map array method.  Create a variable called 'startingNums' and assign it an array of numbers.  Then write a function called 'addThreeToAll' that uses map to add 3 to each number in an array of numbers.\n\n// EXAMPLE CALL:\n//   let startingNums = [4, 41, 832, 72, 89];\n//   console.log (`Q6 addThreeToAll [${startingNums}]: `, addThreeToAll(startingNums));\n\n// EXAMPLE OUTPUT:\n//   Q6 addThreeToAll [4,41,832,72,89]:  [ 7, 44, 835, 75, 92 ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 7 ----------\n// Create a variable called 'baseNums' and assign it an array of numbers.  Write a function called 'squareAll' that takes in an array of numbers, and uses map to return an array containing the squares of each of the numbers.  Remember, you can square a number by multiplying it by itself, or by using the exponent operator like so:\n// let number = 4\n// number * number // 16\n// number ** 2 // 16\n// Note that the caret operator ^ does NOT mean exponent in JavaScript\n\n// EXAMPLE CALL:\n//   let baseNums = [4, 41, 832, 72, 89];\n//   console.log (`Q7 squareAll [${baseNums}]:`, squareAll(baseNums));\n\n// EXAMPLE OUTPUT:\n//   Q7 squareAll [4,41,832,72,89]: [ 16, 1681, 692224, 5184, 7921 ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 8 ----------\n// Write a function called 'allGreetings' that takes an array of names (strings) by using your 'names' variable from question 1. Return an array of greetings (strings). The greetings should each be \"Hello, [name], nice to meet you!\".  You might find it helpful to use template strings.\n\n// EXAMPLE CALL: (using the names array from question 1)\n//   console.log (`Q8 allGreetings [${names}]:`, allGreetings(names));\n\n// EXAMPLE OUTPUT:\n// Q8 allGreetings [Juan Marcos,Aleksandra Ivanov,Zhang Wei,Bernice King]: [\n//  'Hello, Juan Marcos, nice to meet you!',\n//  'Hello, Aleksandra Ivanov, nice to meet you!',\n//  'Hello, Zhang Wei, nice to meet you!',\n//  'Hello, Bernice King, nice to meet you!'\n// ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 9 ----------\n// Create a variable called 'users' and assign it an array of objects.  See example on line 153 below.  Write a function called 'getUsernames' that takes in an array of user objects and uses map to return an array of just the usernames.\n\n// EXAMPLE CALL:\n//   let users = [\n//   {\n//     username: \"juan.marcos\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"aleksandra.ivanov\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"zhang.wei\",\n//     isAdmin: false,\n//   },\n//   {\n//     username: \"bernice.king\",\n//     isAdmin: true,\n//   }\n//   ];\n//\n//  console.log (`Q9 getUsernames:`, getUsernames(users));\n\n// EXAMPLE OUTPUT:\n//   Q9 getUsernames: [ 'juan.marcos', 'aleksandra.ivanov', 'zhang.wei', 'bernice.king' ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 10 ----------\n// Write a function called 'pluck' that takes in an array of objects and a string representing a key as parameters, and uses the map method to return an array of the values at that key for each of the objects.  For example, if we used the users array from the last exercise, we could do pluck(users, 'username') to get the same results as the last question.  If any of the objects does not have a value at that key, the array should have undefined in that slot.  Hint: Using the square bracket notation, you can access a property of an object using a variable.\n\n// EXAMPLE CALL: (using the users array from Q9)\n//   console.log (`Q10 pluck \"isAdmin\":`, pluck(users, \"isAdmin\"));\n\n// EXAMPLE OUTPUT:\n//   Q10 pluck \"isAdmin\": [ false, false, false, true ]\n\n// Try testing with username too!\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS methods - filter -----\n// ---------- QUESTION 11 ----------\n// Write a function called 'evenNumbers' that takes an array as an argument and uses the filter method.  Return only the even numbers from the array of numbers.  Remember - you can find out if a number is even by using the % operator (modulus operator) like this:\n//  number % 2 === 0   (gives a true boolean result, for even numbers)\n\n// EXAMPLE CALL:\n//   let numberArray = [4, 41, 832, 72, 89, 120, 431, 505, 70];\n//   console.log (`Q11 evenNumbers [${numberArray}]:`, evenNumbers(numberArray));\n\n// EXAMPLE OUTPUT:\n//   Q11 evenNumbers [4,41,832,72,89,120,431,505,70]: [ 4, 832, 72, 120, 70 ]\n//\n// If there are no even numbers in the array you make and use, return an empty array.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 12 ----------\n// Write a function called 'greaterThan100' that takes in an array of numbers and uses the filter method.  Return any items in the array that are greater than 100.\n\n// EXAMPLE CALL:\n//   let numArray = [4,41,832,72,89,120,431,505,70];\n//   console.log (`Q12 greaterThan100 [${numArray}]:`, greaterThan100(numArray));\n\n// EXAMPLE OUTPUT:\n//   Q12 greaterThan100 [4,41,832,72,89,120,431,505,70]: [ 832, 120, 431, 505 ]\n//\n// If there are no numbers greater than 100, return an empty array.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 13 ----------\n// Write a function called 'nonAdminUsers' that takes in an array of user objects.  The objects should have a username and isAdmin property each like they do in Question 9.  The function should use the filter method to return the users who are not admins.\n\n// EXAMPLE CALL: (using users array from Q9)\n//   console.log (`Q13 nonAdminUsers:`, nonAdminUsers(users));\n\n// EXAMPLE OUTPUT:\n//   Q13 nonAdminUsers: [\n//     { username: 'juan.marcos', isAdmin: false },\n//     { username: 'aleksandra.ivanov', isAdmin: false },\n//     { username: 'zhang.wei', isAdmin: false }\n//   ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 14 ----------\n// Write a function called 'countAdminUsers' that uses filter and the length method on the result from filter.  The function should return the number of users that have 'isAdmin: true' as part of their object.\n// EXAMPLE CALL: (using users array from Q9)\n//   console.log (`Q14 countAdminUsers:`, countAdminUsers(users));\n\n// EXAMPLE OUTPUT:\n//   Q14 countAdminUsers: 1\n\n// It should only count Bernice King since she is the only admin in that example.\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 15 ----------\n// Write a function called 'shorterThanX' that takes two arguments: an array of strings and an integer.  Use the filter method to return all the strings in the array whose length is shorter than the integer provided as an argument.  If there's no strings in the array that are shorter than the number, return an empty array.\n\n// EXAMPLE ARRAY:\n// let strings = [\n//   \"Four score and seven years ago\",\n//   \"our forefathers brought forth on this continent a new nation\",\n//   \"conceived in liberty\",\n//   \"and dedicated to the proposition that all men are created equal\",\n//   \"Now we are engaged in a great civil war\",\n//   \"testing whether that nation\",\n//   \"or any so conceived and so dedicated\",\n//   \"can long endure.\",\n// ];\n\n// EXAMPLE CALL1:\n//   console.log (`Q15 shorterThanX 20:`, shorterThanX(strings, 20));\n// EXAMPLE OUTPUT1:\n//   Q15 shorterThanX 20: [ 'can long endure.' ]\n\n// EXAMPLE CALL2:\n//   console.log (`Q15 shorterThanX 30:`, shorterThanX(strings, 30));\n// EXAMPLE OUTPUT2:\n//   Q15 shorterThanX 30: [\n//    'conceived in liberty',\n//    'testing whether that nation',\n//    'can long endure.'\n//  ]\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 16 ----------\n// Write a function called 'onlyStrings' that takes an array that has different types of elements (numbers, booleans, strings, etc.) and uses the filter method to return an array of only the strings.\n\n// EXAMPLE CALL:\n//   let manyTypes = [4, \"4\", \"four score\", 80, {age: 80}, [\"nations\"], {type: \"free\"}, \"states\"];\n//   console.log (`Q16 onlyStrings [${manyTypes}]:`, onlyStrings(manyTypes));\n\n// EXAMPLE OUTPUT:\n//   Q16 onlyStrings [4,4,four score,80,[object Object],nations,[object Object],states]: [ '4', 'four score', 'states' ]\n\n// PUT YOUR CODE HERE\n\n// ----- Practice JS methods - find -----\n// ---------- QUESTION 17 ----------\n// Write a function called 'firstOdd' that takes an array of numbers as an argument.  The function should use the find method to find the first odd number in an array.  Remember - you can find out if a number is odd using the % operator like so:\n// number % 2 === 1  (gives a true boolean result, for odd numbers)\n// If there are no odd numbers, return undefined.\n\n// EXAMPLE CALL:\n//   let array = [4,41,832,72,89,120,431,505,70]\n//   console.log (`Q17 firstOdd [${array}]:`, firstOdd(array));\n\n// EXAMPLE OUTPUT:\n//   Q17 firstOdd [4,41,832,72,89,120,431,505,70]: 41\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 18 ----------\n// Write a function called 'divisibleByTen' that takes an array of numbers as an argument.  The function should use the find method to return the first number that is a multiple of 10.  If there are no numbers divisible by 10, return undefined.\n\n// EXAMPLE CALL:\n//   let divArray = [4,41,832,72,89,120,431,505,70]\n//   console.log (`Q18 divisibleByTen [${divArray}]:`, divisibleByTen(divArray));\n\n// EXAMPLE OUTPUT:\n//   Q18 divisibleByTen [4,41,832,72,89,120,431,505,70]: 120\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 19 ----------\n// Write a function called 'divisibleByX' that takes two arguments: an array and an integer.  The function should use the find method to return the first number in the array that's divisible by the integer that was passed as an argument.  If there are no values that are divisible by the second argument, return undefined.\n\n// EXAMPLE ARRAY:\n//    let numbers = [4,41,832,72,89,120,431,70];\n\n// EXAMPLE CALL 1:\n//    Qconsole.log (`Q19 divisibleByX ([${divArray}], 10):`, divisibleByX(numbers, 10));\n// EXAMPLE OUTPUT 1: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70], 10): 120\n\n// EXAMPLE CALL 2:\n//    console.log (`Q190 divisibleByX ([${divArray}]. 3):`, divisibleByX(numbers, 3));\n// EXAMPLE OUTPUT 2: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70]. 3): 72\n\n// EXAMPLE CALL 3:\n//    console.log (`Q19 divisibleByX ([${divArray}], 2):`, divisibleByX(numbers, 2));\n// EXAMPLE OUTPUT 3: (if using the example array above)\n//    Q19 divisibleByX ([4,41,832,72,89,120,431,505,70], 2): 4\n\n// PUT YOUR CODE HERE\n\n// ---------- QUESTION 20 ----------\n// Write a function called 'startsWithLetter' that takes two arguments: an array of strings and a letter.  The function should use the find method to return the first string in the array that starts with the letter provided as the argument.  If there's no string in the array that starts with that letter, return undefined. The function should leave lowercase and uppercase letters alone.\n// STRETCH GOAL: Throw an error \"Letter must be a string of length 1\" if the second argument is not a string, or if its length is more than 1.\n\n// EXAMPLE ARRAY:\n// let jokeStrings =\n//   [\"Do you want to hear a joke?\",\n//    \"It's about a three-legged dog\",\n//    \"The dog walks into a bar\",\n//    \"The dog says, \",\n//    \"\\\"I'm looking for the man who shot my paw\\\"\",\n//    \"Get it?\"]\n\n// EXAMPLE CALL 1:\n//    console.log (`Q20 startsWithLetter T:`, startsWithLetter(jokeStrings, \"T\"));\n// EXAMPLE OUTPUT 1: (if using the example array above)\n//    Q20 startsWithLetter T: The dog walks into a bar\n\n// EXAMPLE CALL 2:\n//    console.log (`Q20 startsWithLetter I:`, startsWithLetter(jokeStrings, \"I\"));\n// EXAMPLE OUTPUT 2: (if using the example array above)\n//    Q20 startsWithLetter I: It's about a three-legged dog\n\n// EXAMPLE CALL 3:\n//    console.log (`Q20 startsWithLetter i:`, startsWithLetter(jokeStrings, \"i\"));\n// EXAMPLE OUTPUT 3: (if using the example array above)\n//    Q20 startsWithLetter i: undefined\n\n// STRETCH GOAL EXAMPLE CALL:\n//    console.log (`Q20 startsWithLetter dog:`, startsWithLetter(jokeStrings, \"dog\"));\n// STRETCH GOAL EXAMPLE OUTPUT:\n//    Q20 startsWithLetter dog: Error: Letter must be a string of length 1\n\n// PUT YOUR CODE HERE\n\n```\n",
        "codeExample": "",
        "_id": "687970c3a4ac7ef2a17a639e"
      }
    ],
    "submissionInstructions": "Please submit on time",
    "checklist": [],
    "checkForUnderstanding": []
  },
  "subsections": [
    {
      "subsectionOrder": 1,
      "title": "Lesson 4",
      "content": "- [V2 Scrimba - JS Deep Dive - Objects & Maps](https://v2.scrimba.com/javascript-deep-dive-c0a/~01d)\n- **NOTE: Watch only the rest of the videos in the playlist (the last 3 you were instructed to skip last week).**\n  - **If you are getting an alert \"Only available to subscribers\" you will need to be sure your are logged in to Scrimba with the email address we have on file for you, and that you have redeemed the link to free access you were emailed.  Remember to start at the 9th part titled \"How Maps can do what Objects can't\" and go to the end of the Objects section**\n\n- The section on \"Intermediate/advanced array magic\" that you could skip in last week's Odin Project Fundamentals part 5 is now included in the following section for you to check out this week:\n\n> ### Intermediate/advanced array magic\n>\n> Besides being a quick and handy way to store data, arrays also have a set of functions for manipulating that data in very powerful ways. Once you begin to master these functions you will start to see ways to use them all over the place! There are really only a handful of these functions… but as you’ll soon see, the possibilities of what you can do with them are near endless.\n>\n> 1. Start out by watching [this video](https://www.youtube.com/watch?v=HB1ZC7czKRs) from Wes Bos. To follow along, use your local Javascript30 repository. If you don’t have the repo yet, clone it from [here](https://github.com/wesbos/JavaScript30).\n> 2. Watch and code with [Part 2](https://www.youtube.com/watch?v=QNmRfyNg1lw) of Wes Bos’s array series.\n> 3. For a more comprehensive and in-depth guide to array methods in JavaScript, you can also check out this [array method guide](https://javascript.info/array-methods). This resource covers each method in detail, with examples and explanations of their usage.\n\n# Callbacks\n\nCallbacks are functions that you provide to another function or system to be executed when a certain condition or event occurs. They are a way of saying, \"Hey, when this thing happens, do this specific task.”\n\nImagine you have a button on a website, and you want something to happen when the button is clicked. You could create a callback function that specifies what should happen when the button is clicked. This callback function is then associated with the button.\n\n```jsx\n// A function that adds two numbers and uses a callback to return the result\nfunction addNumbers(a, b, callback) {\n  const result = a + b;\n  callback(result);\n}\n\n// Define a callback function to handle the result\nfunction handleResult(result) {\n  console.log(\"The result is: \" + result);\n}\n\n// Call the addNumbers function with a callback\naddNumbers(5, 3, handleResult);\n```\n\nIn this example, the **`addNumbers`** function takes two numbers **`a`** and **`b`**, adds them together, and then calls a provided **`callback`** function with the result. The **`handleResult`** function is the callback, and it prints the result to the console.\n\nThis demonstrates how callbacks can be used to pass control from one function to another, allowing you to specify what should happen after a specific operation (in this case, addition) is complete.\n\nWatch this video on the mistake with functions every developer makes, because remember **making mistakes is a great way to learn!** [YouTube Video Link](https://www.youtube.com/watch?v=7UMuJMiNjSk&t=98s)\n\nCallbacks are a versatile and powerful concept in programming, and they can be used in various scenarios. Here are some common situations where callbacks are useful:\n\n1. **Asynchronous Operations:** Callbacks are often used with asynchronous operations, like making network requests, reading files, or interacting with databases. They allow you to specify what should happen when the operation is completed without blocking the rest of your program.\n2. **Event Handling:** In user interfaces, callbacks are used to respond to user interactions such as button clicks, mouse movements, or keyboard input. You define a callback function that gets triggered when the event occurs.\n3. **Modular and Reusable Code:** Callbacks make it easier to write modular and reusable code. You can create functions that accept callbacks to perform specific tasks, allowing you to reuse those functions with different behaviors depending on the callback provided.\n4. **Iterations and Loops:** Callbacks can be used in iterations and loops to execute a function for each element in a collection, like an array or a list. This is known as \"callback-based iteration.\"\n5. **Promises and Promisified Code:** In JavaScript, promises often work with callbacks to handle asynchronous tasks more cleanly. Promises provide a structured way to handle callbacks and make asynchronous code easier to read and maintain.\n\nOverall, callbacks are a fundamental building block in software development, enabling you to define what should happen when a particular event or operation occurs, making your code more flexible, modular, and responsive.\n\nWe will be covering all these aspects of the uses of callbacks in later lessons, but it is important to understand how they work at a very basic level.\n\n# Higher Order Functions\n\nAs we talked about callbacks previously, higher-order functions are those functions that receive a callback as a parameter.\n\n```jsx\nfunction addNumbers(a, b, callback) {\n  const result = a + b;\n  callback(result);\n}\n```\n\nYou can create your own higher-order functions or you can use many of the built-in higher-order methods that are part of the Array object.\n\nArrays have many methods and one category of methods it has are iterative which means they will iterate through the array and execute the callback function you pass to it for every element in the array.\n\nExamples would be the [forEach()](https://javascript.info/array-methods#iterate-foreach), [map()](https://javascript.info/array-methods#map), [filter()](https://javascript.info/array-methods#filter), and others.\n\n### The forEach() method\n\nThe forEach() method accepts a function as an argument. The function that you pass to the method is referred to as a **callback** function. \n\nYou provide forEach() with a callback function. Then, internally, forEach() executes that callback function once for each element of the array. \n\n```jsx\nconst numbers = [1, 2, 3, 4];\nnumbers.forEach(function(num) {\n  console.log(num);\n});\n// This will print each number in the array.\n```\n\n### The map() method\n\nThe map() will run the callback function for each of the items in the array. The map() method uses the callback function to create the items for a new array. The map() method will return a new array of the same number of elements as the original array and the forEach method will not return anything.\n\n```jsx\nconst numbers = [1, 2, 3, 4];\nconst squared = numbers.map(function(num) {\n  return num * num;\n});\n// squared is now [1, 4, 9, 16]\n```\n\n### The filter() method\n\nSometimes, you'll want to build up a new list of items that meet a particular condition. This method builds a new array of only the items that match a certain condition. The filter() method will “filter” the array so that you have only some of the items.\n\n```jsx\nconst numbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = numbers.filter(function(num) {\n  return num % 2 === 0;\n});\n// evenNumbers is now [2, 4, 6]\n```\n\n**Note:**  There are many more of these type of methods, but do not worry about knowing how to use all of them, starting with a few is good enough.\n",
      "videoUrl": "",
      "codeExamples": [],
      "externalLinks": [],
      "quizzes": [],
      "_id": "687970c3a4ac7ef2a17a639d"
    }
  ]
}